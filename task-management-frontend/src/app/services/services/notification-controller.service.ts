/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAllNotifications } from '../fn/notification-controller/find-all-notifications';
import { FindAllNotifications$Params } from '../fn/notification-controller/find-all-notifications';
import { findNotificationById } from '../fn/notification-controller/find-notification-by-id';
import { FindNotificationById$Params } from '../fn/notification-controller/find-notification-by-id';
import { markNotificationAsRead } from '../fn/notification-controller/mark-notification-as-read';
import { MarkNotificationAsRead$Params } from '../fn/notification-controller/mark-notification-as-read';
import { NotificationResponse } from '../models/notification-response';
import { PageResponseNotificationResponse } from '../models/page-response-notification-response';
import { saveNotification } from '../fn/notification-controller/save-notification';
import { SaveNotification$Params } from '../fn/notification-controller/save-notification';

@Injectable({ providedIn: 'root' })
export class NotificationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllNotifications()` */
  static readonly FindAllNotificationsPath = '/notifications';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllNotifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllNotifications$Response(params?: FindAllNotifications$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseNotificationResponse>> {
    return findAllNotifications(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllNotifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllNotifications(params?: FindAllNotifications$Params, context?: HttpContext): Observable<PageResponseNotificationResponse> {
    return this.findAllNotifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseNotificationResponse>): PageResponseNotificationResponse => r.body)
    );
  }

  /** Path part for operation `saveNotification()` */
  static readonly SaveNotificationPath = '/notifications';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveNotification()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveNotification$Response(params: SaveNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveNotification(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveNotification$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveNotification(params: SaveNotification$Params, context?: HttpContext): Observable<number> {
    return this.saveNotification$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `markNotificationAsRead()` */
  static readonly MarkNotificationAsReadPath = '/notifications/read/{notification-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markNotificationAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markNotificationAsRead$Response(params: MarkNotificationAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return markNotificationAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markNotificationAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markNotificationAsRead(params: MarkNotificationAsRead$Params, context?: HttpContext): Observable<number> {
    return this.markNotificationAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findNotificationById()` */
  static readonly FindNotificationByIdPath = '/notifications/{notification-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findNotificationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findNotificationById$Response(params: FindNotificationById$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationResponse>> {
    return findNotificationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findNotificationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findNotificationById(params: FindNotificationById$Params, context?: HttpContext): Observable<NotificationResponse> {
    return this.findNotificationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationResponse>): NotificationResponse => r.body)
    );
  }

}
